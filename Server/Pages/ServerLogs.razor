@page "/server-logs"
@attribute [Authorize]
@inherits AuthComponentBase

@inject IDataService DataService
@inject IToastService ToastService
@inject IJsInterop JsInterop

<h3 class="mb-3">Fichiers log</h3>


@if (User?.IsAdministrator == true)
{
    <div class="buttons-row mb-3">
        <div>
            <button class="btn btn-danger" type="button" @onclick="ClearAllLogs">
                Effacer les logs
            </button>
        </div>
        <div>
            <button class="btn btn-primary"
                    onclick="location.assign('/API/ServerLogs/Download')">
                Télécharger les logs
            </button>
        </div>
        <div>
            <button class="btn btn-primary"
                    onclick="location.assign('/API/ScriptResults')">
                Télécharger l'historique des scripts
            </button>
        </div>
    </div>
    <div class="filters-row mb-3">
        <div style="display:inline-block">
            <strong>Type:</strong>
            <br />
            <select class="form-control-sm" @bind="_eventType">
                <option value="">Tous</option>
                @foreach (var eventType in Enum.GetValues(typeof(EventType)))
                {
                    <option @key="eventType" value="@eventType">@eventType</option>
                }
            </select>
        </div>
        <div style="display:inline-block">
            <strong>Filtre :</strong>
            <br />
            <input type="text" @bind="_messageFilter" />
        </div>
        <div style="display:inline-block">
            <strong>Du :</strong>
            <br />
            <input type="date" @bind="_fromDate" />
        </div>
        <div style="display:inline-block">
            <strong>Au :</strong>
            <br />
            <input type="date" @bind-value="_toDate" />
        </div>
    </div>

    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>Type</th>
                <th>Horodatage</th>
                <th>Message</th>
                <th>Source</th>
                <th>Stack Trace</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eventLog in FilteredLogs)
            {
                <tr @key="eventLog">
                    <td>@eventLog.EventType</td>
                    <td>@eventLog.TimeStamp</td>
                    <td>@eventLog.Message</td>
                    <td>@eventLog.Source</td>
                    <td>@eventLog.StackTrace</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h5 class="text-muted">Seuls les administrateurs peuvent voir cette page.</h5>
}

@code {
    private readonly List<EventLog> _filteredLogs = new();
    private EventType? _eventType;
    private string _messageFilter;
    private DateTimeOffset _fromDate = DateTimeOffset.Now.AddDays(-7);
    private DateTimeOffset _toDate = DateTimeOffset.Now;



    private IEnumerable<EventLog> FilteredLogs
    {
        get
        {
            return DataService.GetEventLogs(User.UserName,
                   _fromDate,
                   _toDate,
                   _eventType,
                   _messageFilter);
        }
    }

    private async Task ClearAllLogs()
    {
        var result = await JsInterop.Confirm("Etes-vous sûr de vouloir effacer les logs ?");
        if (result)
        {
            await DataService.ClearLogs(User.UserName);
            ToastService.ShowToast("Logs effacés.");
        }
    }

}
